
.. _program_listing_file_include_CustomLibrary_SDL_Music.h:

Program Listing for File Music.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_Music.h>` (``include/CustomLibrary/SDL/Music.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef _CTL_SDL2_MUSIC_
   #define _CTL_SDL2_MUSIC_
   
   #include <SDL2/SDL.h>
   #include <SDL2/SDL_mixer.h>
   
   #include "../Tags.h"
   #include "../Traits.h"
   
   #include <cassert>
   #include <memory>
   
   #include "TypeTraits.h"
   #include "Loader.h"
   #include "Player.h"
   
   namespace ctl::sdl
   {
       class Music
       {
           struct Unique_Destructor
           {
               void operator()(Mix_Music *m) { Mix_FreeMusic(m); }
           };
   
       public:
           Music() = default;
   
           [[nodiscard]] auto music() const noexcept
           {
               assert(m_music && "Mix_Music is a nullptr.");
               return m_music.get();
           }
   
           auto music(Mix_Music *mus) noexcept { m_music.reset(mus); }
   
           static void pause()
           {
               if (Mix_PausedMusic() == 0)
                   Mix_PauseMusic();
           }
           static auto is_paused() { return Mix_PausedMusic() != 0; }
           static auto playing() { return Mix_PlayingMusic() != 0; }
           static void stop() { Mix_HaltMusic(); }
           static void stop_fade(int ms) { Mix_FadeOutMusic(ms); }
           static void volume(unsigned char vol) { Mix_VolumeMusic(vol); }
           static void unpause() { Mix_ResumeMusic(); }
   
       private:
           std::unique_ptr<Mix_Music, Unique_Destructor> m_music;
       };
   
       template<template<typename> class... Ex>
       using EMusic = typename MixBuilder<Music, Ex...>::type;
   
   } // namespace ctl::sdl
   
   #endif // !_CTL_SDL2_MUSIC_
