
.. _program_listing_file_include_CustomLibrary_SDL_Render.h:

Program Listing for File Render.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_Render.h>` (``include/CustomLibrary/SDL/Render.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <SDL2/SDL.h>
   
   #include "TypeTraits.h"
   #include "../Traits.h"
   
   namespace ctl::sdl
   {
       // -----------------------------------------------------------------------------
       // Predefinitions
       // -----------------------------------------------------------------------------
   
       class Renderer;
   
       template<typename>
       class Delayed;
   
       // -----------------------------------------------------------------------------
       // Render Implementation
       // -----------------------------------------------------------------------------
   
       namespace detail
       {
           template<typename, typename, typename>
           class _Render_;
   
           template<typename Full, typename Impl>
           class _Render_<Delayed<Nonesuch>, Full, Impl> : public Impl
           {
           public:
               using Impl::Impl;
   
               void locking_render()
               {
                   this->render();
                   this->obj()->do_render(false);
               }
           };
   
           template<typename Full, typename Impl>
           class _Render_<Renderer, Full, Impl> : public Impl
           {
           public:
               using Impl::Impl;
   
               void fill(const SDL_Color &col)
               {
                   SDL_SetRenderDrawColor(this->obj()->get(), col.r, col.g, col.b, col.a);
                   SDL_RenderClear(this->obj()->get());
               }
   
               void render() { SDL_RenderPresent(this->obj()->get()); }
           };
       } // namespace detail
   
       // -----------------------------------------------------------------------------
       // Render Extension
       // -----------------------------------------------------------------------------
   
       template<typename T>
       using Render = typename Filter<detail::_Render_, FunctorO<T>, T>::type;
   
       template<typename _T>
       auto render(_T *const ptr)
       {
           return Render<_T>(ptr);
       }
   
   } // namespace ctl::sdl
