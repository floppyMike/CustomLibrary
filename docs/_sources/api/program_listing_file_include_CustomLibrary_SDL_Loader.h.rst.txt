
.. _program_listing_file_include_CustomLibrary_SDL_Loader.h:

Program Listing for File Loader.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_Loader.h>` (``include/CustomLibrary/SDL/Loader.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <SDL2/SDL.h>
   #include <SDL2/SDL_image.h>
   #include <SDL2/SDL_mixer.h>
   #include <SDL2/SDL_ttf.h>
   
   #include "../Traits.h"
   
   #include "Renderer.h"
   #include "TypeTraits.h"
   
   namespace ctl::sdl
   {
       // -----------------------------------------------------------------------------
       // Predefinitions
       // -----------------------------------------------------------------------------
   
       class Texture;
       class Text;
       class Music;
       class Font;
   
       // -----------------------------------------------------------------------------
       // Loader Implementations
       // -----------------------------------------------------------------------------
   
       namespace detail
       {
           template<typename, typename, typename>
           class _Loader_;
   
           template<typename Full, typename Impl>
           class _Loader_<Texture, Full, Impl> : public Impl
           {
           public:
               using Impl::Impl;
   
               auto surface(SDL_Surface *surface) const -> void
               {
                   this->obj()->texture(SDL_CreateTextureFromSurface(this->renderer()->get(), surface));
               }
   
               auto file(const char *path) -> void
               {
                   this->obj()->texture(IMG_LoadTexture(this->renderer()->get(), path));
               }
   
               auto bytes(void *src, int size) -> void
               {
                   this->obj()->texture(IMG_LoadTexture_RW(this->renderer()->get(), SDL_RWFromMem(src, size), 1));
               }
           };
   
           template<typename Full, typename Impl>
           class _Loader_<Text, Full, Impl> : public Impl
           {
               auto _load_(SDL_Surface *s, const char *text) -> void
               {
                   this->obj()->text(SDL_CreateTextureFromSurface(this->renderer()->get(), s), text);
                   SDL_FreeSurface(s);
               }
   
           public:
               using Impl::Impl;
   
               auto solid(TTF_Font *f, const char *text, const SDL_Color &colour = { 0, 0, 0, 0xFF }) -> void
               {
                   return _load_(TTF_RenderUTF8_Solid(f, text, colour), text);
               }
   
               auto shaded(TTF_Font *f, const char *text, const SDL_Color &bg, const SDL_Color &colour = { 0, 0, 0, 0xFF })
                   -> void
               {
                   return _load_(TTF_RenderUTF8_Shaded(f, text, colour, bg), text);
               }
   
               auto blended(TTF_Font *f, const char *text, const SDL_Color &colour = { 0, 0, 0, 0xFF }) -> void
               {
                   return _load_(TTF_RenderUTF8_Blended(f, text, colour), text);
               }
   
               auto wrapped(TTF_Font *f, const char *text, const Uint16 &wrapper,
                            const SDL_Color &colour = { 0, 0, 0, 0xFF }) -> void
               {
                   return _load_(TTF_RenderUTF8_Blended_Wrapped(f, text, colour, wrapper), text);
               }
           };
   
           template<typename Full, typename Impl>
           class _Loader_<Music, Full, Impl> : public Impl
           {
           public:
               using Impl::Impl;
   
               auto file(std::string_view path) -> void
               {
                   Mix_Music *temp = Mix_LoadMUS(path.data());
                   ASSERT(temp, Mix_GetError());
   
                   this->obj()->music(temp);
               }
           };
   
           template<typename Full, typename Impl>
           class _Loader_<Font, Full, Impl> : public Impl
           {
           public:
               using Impl::Impl;
   
               auto file(const char *path, int pt) -> void
               {
                   auto *temp = TTF_OpenFont(path, pt);
                   ASSERT(temp, TTF_GetError());
                   this->obj()->font(temp);
               }
           };
   
       } // namespace detail
   
       // -----------------------------------------------------------------------------
       // Loading Extension
       // -----------------------------------------------------------------------------
   
       template<typename T>
       using Load = typename Filter<detail::_Loader_, FunctorR<T>, T>::type;
   
       template<typename _T>
       auto load(_T *const ptr, Renderer *r)
       {
           return Load<_T>(ptr, r);
       }
   
   } // namespace ctl::sdl
