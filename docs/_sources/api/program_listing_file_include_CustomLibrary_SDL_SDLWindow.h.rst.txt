
.. _program_listing_file_include_CustomLibrary_SDL_SDLWindow.h:

Program Listing for File SDLWindow.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_SDLWindow.h>` (``include/CustomLibrary/SDL/SDLWindow.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Camera2D.h"
   #include "Engine.h"
   #include "Render.h"
   #include "Renderer.h"
   #include "State.h"
   #include "Window.h"
   #include "../Error.h"
   
   namespace ctl::sdl
   {
       class SDLWindow : public IWindow
       {
       public:
           SDLWindow(const char *name, const mth::Dim<int> &dim, const Uint32 &windowFlags = SDL_WINDOW_SHOWN,
                     const Uint32 &rendererFlags = SDL_RENDERER_ACCELERATED)
               : m_win(name, dim, windowFlags)
               , m_renderer(&m_win, rendererFlags)
           {
               m_renderer.logical_size(m_win.dim());
           }
   
           ~SDLWindow() { destroy(); }
   
           void destroy()
           {
               m_win.destroy();
               m_renderer.destroy();
           }
   
           template<typename State, typename... _Args>
           void queue_state(_Args &&... args)
           {
               m_state.set<State>(std::forward<_Args>(args)...);
           }
   
           constexpr auto renderer() noexcept -> auto & { return m_renderer; }
           constexpr auto window() noexcept -> auto & { return m_win; }
   
           constexpr auto camera() noexcept -> auto & { return m_cam; }
   
           void pre_pass() override { m_state.update(); }
           void event(const SDL_Event &e) override
           {
               if (e.window.windowID == m_win.ID())
               {
                   m_state->input(e);
                   m_state->event(e);
               }
           }
           void update() override { m_state->update(); }
           void fixed_update() override { m_state->fixed_update(); }
           void render() override
           {
               if (m_renderer.will_render())
               {
                   auto r = sdl::render(&m_renderer);
   
                   r.fill(sdl::WHITE);
                   m_state->draw();
                   r.locking_render();
               }
           }
   
       private:
           Window                      m_win;
           sdl::Delayed<sdl::Renderer> m_renderer;
   
           Camera2D m_cam;
   
           StateManager<IState> m_state;
       };
   
   } // namespace ctl::sdl
