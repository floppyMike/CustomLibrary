
.. _program_listing_file_include_CustomLibrary_SDL_State.h:

Program Listing for File State.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_State.h>` (``include/CustomLibrary/SDL/State.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <SDL2/SDL.h>
   
   #include <memory>
   #include <functional>
   
   namespace ctl::sdl
   {
       // -----------------------------------------------------------------------------
       // State Interface
       // -----------------------------------------------------------------------------
   
       class IState
       {
       public:
           virtual ~IState() = default;
   
           virtual void event(const SDL_Event &) {}
           virtual void input(const SDL_Event &) {}
           virtual void update() {}
           virtual void fixed_update() {}
           virtual void draw() {}
       };
   
       // -----------------------------------------------------------------------------
       // State Manager
       // -----------------------------------------------------------------------------
   
       template<typename ImplState>
       class StateManager
       {
       public:
           auto operator->() const noexcept -> const auto & { return m_state; }
           auto operator->() noexcept -> auto & { return m_state; }
   
           template<typename State, typename... _Arg>
           void set(_Arg &&... args)
           {
               m_func = [args = std::make_tuple(std::forward<_Arg>(args)...)]() mutable {
                   return std::apply([](auto &&... args) { return std::make_unique<State>(std::forward<_Arg>(args)...); },
                                     std::move(args));
               };
           }
   
           void update()
           {
               if (m_func)
               {
                   m_state = m_func();
                   m_func  = nullptr;
               }
           }
   
       private:
           std::unique_ptr<ImplState>                  m_state;
           std::function<std::unique_ptr<ImplState>()> m_func;
       };
   
   } // namespace ctl::sdl
