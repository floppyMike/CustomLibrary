
.. _program_listing_file_include_CustomLibrary_SDL_TypeTraits.h:

Program Listing for File TypeTraits.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_TypeTraits.h>` (``include/CustomLibrary/SDL/TypeTraits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <SDL2/SDL.h>
   
   #include "../Traits.h"
   
   #include <cassert>
   
   namespace ctl::sdl
   {
       class Renderer;
   
       template<typename T>
       concept uses_sdl_renderer = requires(T t)
       {
           {
               t.renderer()->get()
           }
           ->std::same_as<SDL_Renderer *>;
       };
   
       // -----------------------------------------------------------------------------
       // Functor Extension (Mixin)
       // -----------------------------------------------------------------------------
   
       template<typename T, typename Renderer>
       class FunctorR : public Functor<T>
       {
       public:
           using Functor<T>::Functor;
   
           constexpr FunctorR() = default;
           constexpr FunctorR(T *o, Renderer *r)
               : Functor<T>(o)
               , m_r(r)
           {
           }
   
           constexpr auto renderer(Renderer *const r) noexcept { m_r = r; }
           constexpr auto renderer() const noexcept
           {
               assert(m_r != nullptr && "Renderer isn't assigned.");
               return m_r;
           }
   
       private:
           Renderer *m_r = nullptr;
       };
   
   } // namespace ctl::sdl
