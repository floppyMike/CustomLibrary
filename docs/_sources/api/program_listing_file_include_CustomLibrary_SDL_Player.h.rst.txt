
.. _program_listing_file_include_CustomLibrary_SDL_Player.h:

Program Listing for File Player.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_CustomLibrary_SDL_Player.h>` (``include/CustomLibrary/SDL/Player.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef _CTL_SDL2_PLAYER_
   #define _CTL_SDL2_PLAYER_
   
   #include <SDL2/SDL.h>
   #include <SDL2/SDL_mixer.h>
   
   #include "TypeTraits.h"
   
   namespace ctl::sdl
   {
       // -----------------------------------------------------------------------------
       // Predefinitions
       // -----------------------------------------------------------------------------
   
       class Music;
   
       // -----------------------------------------------------------------------------
       // Player Implementation
       // -----------------------------------------------------------------------------
   
       namespace detail
       {
           template<typename, typename, typename>
           class _Player_;
   
           template<typename Full, typename Impl>
           class _Player_<Music, Full, Impl> : public Impl
           {
           public:
               using Impl::Impl;
   
               void normal(int loop)
               {
                   if (Mix_PlayingMusic() == 0)
                       Mix_PlayMusic(this->obj()->music(), loop);
   
                   else if (Mix_PausedMusic() != 0)
                       Mix_ResumeMusic();
               }
   
               void fade(int loop, int ms)
               {
                   if (Mix_PlayingMusic() == 0)
                       Mix_FadeInMusic(this->underlying()->obj()->music(), loop, ms);
   
                   else if (Mix_PausedMusic() != 0)
                       Mix_ResumeMusic();
               }
           };
   
       } // namespace detail
   
       // -----------------------------------------------------------------------------
       // Playing Exension
       // -----------------------------------------------------------------------------
   
       template<typename T>
       using Player = typename Filter<detail::_Player_, Functor<T>, T>::type;
   
       template<typename _T>
       auto play(_T* const ptr)
       {
           return Player<_T>(ptr);
       }
   
   } // namespace ctl::sdl
   
   #endif // !_CTL_SDL2_PLAYER_
